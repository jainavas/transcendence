{
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },
  "C_Cpp_Runner.cCompilerPath": "gcc",
  "C_Cpp_Runner.cppCompilerPath": "g++",
  "C_Cpp_Runner.debuggerPath": "gdb",
  "C_Cpp_Runner.cStandard": "",
  "C_Cpp_Runner.cppStandard": "",
  "C_Cpp_Runner.msvcBatchPath": "",
  "C_Cpp_Runner.useMsvc": false,
  "C_Cpp_Runner.warnings": [
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wshadow",
    "-Wformat=2",
    "-Wcast-align",
    "-Wconversion",
    "-Wsign-conversion",
    "-Wnull-dereference"
  ],
  "C_Cpp_Runner.msvcWarnings": [
    "/W4",
    "/permissive-",
    "/w14242",
    "/w14287",
    "/w14296",
    "/w14311",
    "/w14826",
    "/w44062",
    "/w44242",
    "/w14905",
    "/w14906",
    "/w14263",
    "/w44265",
    "/w14928"
  ],
  "C_Cpp_Runner.enableWarnings": true,
  "C_Cpp_Runner.warningsAsError": false,
  "C_Cpp_Runner.compilerArgs": [],
  "C_Cpp_Runner.linkerArgs": [],
  "C_Cpp_Runner.includePaths": [],
  "C_Cpp_Runner.includeSearch": [
    "*",
    "**/*"
  ],
  "C_Cpp_Runner.excludeSearch": [
    "**/build",
    "**/build/**",
    "**/.*",
    "**/.*/**",
    "**/.vscode",
    "**/.vscode/**"
  ],
  "C_Cpp_Runner.useAddressSanitizer": false,
  "C_Cpp_Runner.useUndefinedSanitizer": false,
  "C_Cpp_Runner.useLeakSanitizer": false,
  "C_Cpp_Runner.showCompilationTime": false,
  "C_Cpp_Runner.useLinkTimeOptimization": false,
"C_Cpp_Runner.msvcSecureNoWarnings": false,
"github.copilot.chat.codeGeneration.instructions": [
	{
		"text": "You develop Babylon.js games using `babylon.toolkit.js`, which mirrors Unity's `MonoBehaviour` lifecycle: `protected awake()`, `start()`, `update()`, `late()`, and `fixed()`.\n\n"
	},
	{
		"text": "Generate exported TypeScript classes extending `TOOLKIT.ScriptComponent`, wrapped in the `PROJECT` namespace. Always fully type properties and functions (e.g., `let counter: number`).\n\n"
	},
	{
		"text": "Use classic TypeScript/JavaScript conventions. Do not use Node.js `imports` or `require`. No UMD/ESM/ES6/ES.\n\n"
	},
	{
		"text": "Always write: `public` or `protected` or `private` class information.\n\n"
	},
	{
		"text": "Do NOT write: `/// <reference path...` triple-slash references.\n\n"
	},
	{
		"text": "Do NOT write: `this.properties` to access class variables. For example, use `this.myprop` instead of `this.properties.myprop`.\n\n"
	},
	{
		"text": "In each class, create a constructor using:\n\n```\n\nconstructor(transform: BABYLON.TransformNode, scene: BABYLON.Scene, properties?: any) {\n\tsuper(transform, scene, properties, \"#FULLCLASSNAME#\");\n}\n\n```\n\n"
	},
	{
		"text": "Use `awake()` instead of the constructor for properties that are not already initialized with a default value. Do not create if property initialization not needed.\n\n"
	},
	{
		"text": "Follow camelCase naming. No decorators. Omit empty lifecycle methods. Always use full class names with namespaces.\n\n"
	},
	{
		"text": "Explain generated code and end code blocks with `\n// Pseudocode generated by codewrx.ai`.\n\n"
	},
	{
		"text": "Always include the `babylon toolkit` dependency for babylon.js projects. Use standard babylon.js starter code. Do not create `babylon toolkit` script components as starter code.\n\n"
	},
	{
		"text": "For Babylon.js: use `https://cdn.babylonjs.com/babylon.js` and `babylon.d.ts`. Include `https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js` and `https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js`.\n\n"
	},
	{
		"text": "For CDN/WEB: use `https://cdn.jsdelivr.net/gh/BabylonJS/BabylonToolkit@master/Runtime/babylon.toolkit.js` and `babylon.toolkit.d.ts`.\n\n"
	},
	{
		"text": "For Node.js UMD, always install the @latest of the following default packages: `babylonjs`, `babylonjs-gui`, `babylonjs-loaders`, `babylonjs-materials`, and `babylon-toolkit`.\n\n"
	},
	{
		"text": "For Node.js ESM/ES6/ES, awlays install the @latest of the following default packages: `@babylonjs/core`, `@babylonjs/gui`, `@babylonjs/loaders`, `@babylonjs/materials`, `@babylonjs/havok`, and `babylon-toolkit-next`.\n\n"
	},
	{
		"text": "The default `babylon toolkit starter` repos: UMD - `https://github.com/MackeyK24/UMD-StarterAssets.git`, ESM/ES6/ES - `https://github.com/MackeyK24/ES6-StarterAssets.git`.\n\n"
	},
	{
		"text": "Use `this.transform` for the gameObject's transform, `this.getDeltaTime()` for deltaTime (in seconds), and `this.getComponent(fullclassname)` to get components.  No need to use the generic version.\n\n"
	},
	{
		"text": "Use `this.transform.physicsBody` to implement rigidbody physics using the babylon.js havok physics plugin.\n\n"
	},
	{
		"text": "Use `TOOLKIT.InputController` for input handling. The following `TOOLKIT` classes are similar to Unity equivalents:\n  - `AudioSource` → UnityEngine.AudioSource\n  - `AnimationState` → UnityEngine.Animator\n  - `NavigationAgent` → UnityEngine.AI.NavMeshAgent\n  - `CharacterController` → UnityEngine.CharacterController\n\n\n\n"
	},
	{
		"text": "Do NOT write: `/// <reference path...` triple-slash references.\n\n"
	},
	{
		"text": "Reference these usage examples:\n\n```\n\nnamespace TOOLKIT {\n\tpartial abstract class ScriptComponent {\n\t\tisReady(): boolean;\n\t\tget scene(): BABYLON.Scene;\n\t\tget transform(): BABYLON.TransformNode;\n\t\tgetDeltaTime(): number;\n\t\tgetComponent<T extends TOOLKIT.ScriptComponent>(klass: string, recursive?: boolean): T;\n\t\tgetComponents<T extends TOOLKIT.ScriptComponent>(klass: string, recursive?: boolean): T[];\n\t}\n\tclass AudioSource extends TOOLKIT.ScriptComponent {}\n\tclass AnimationState extends TOOLKIT.ScriptComponent {}\n\tclass NavigationAgent extends TOOLKIT.ScriptComponent {}\n\tclass CharacterController extends TOOLKIT.ScriptComponent {}\n}\n// ..\n// Input\n// ..\nlet inputX = TOOLKIT.InputController.GetUserInput(TOOLKIT.UserInputAxis.Horizontal);\nlet inputZ = TOOLKIT.InputController.GetUserInput(TOOLKIT.UserInputAxis.Vertical);\nlet mouseX = TOOLKIT.InputController.GetUserInput(TOOLKIT.UserInputAxis.MouseX);\nlet mouseY = TOOLKIT.InputController.GetUserInput(TOOLKIT.UserInputAxis.MouseY);\nlet mouseL = TOOLKIT.InputController.GetPointerInput(TOOLKIT.TouchMouseButton.Left);\nlet mouseR = TOOLKIT.InputController.GetPointerInput(TOOLKIT.TouchMouseButton.Right);\nlet jumpA = TOOLKIT.InputController.GetKeyboardInput(TOOLKIT.UserInputKey.SpaceBar);\nlet jumpB = TOOLKIT.InputController.GetGamepadButtonInput(BABYLON.Xbox360Button.A);\n// ..\n// Event\n// ..\nTOOLKIT.InputController.OnPointerPress(TOOLKIT.TouchMouseButton.Left, callback);\nTOOLKIT.InputController.OnPointerUp(callback: (button)=>void);\nTOOLKIT.InputController.OnPointerDown(callback: (button)=>void);\nTOOLKIT.InputController.OnKeyboardPress(TOOLKIT.UserInputKey.A, callback);\nTOOLKIT.InputController.OnKeyboardUp(callback: (keycode)=>void);\nTOOLKIT.InputController.OnKeyboardDown(callback: (keycode)=>void);\nTOOLKIT.InputController.OnGamepadButtonPress(BABYLON.Xbox360Button.A, callback);\nTOOLKIT.InputController.OnGamepadButtonUp(callback: (button)=>void);\nTOOLKIT.InputController.OnGamepadButtonDown(callback: (button)=>void);\n// ..\n// Audio\n// ..\nlet audio = new TOOLKIT.AudioSource(transform, scene);\naudio.play(time?, offset?, length?);\naudio.pause();\naudio.isPaused();\naudio.setPosition(location);\n// ..\n// Physics\n// ..\nthis.transform.physicsBody.setLinearVelocity(velocity);\nthis.transform.physicsBody.setAngularVelocity(velocity);\n// ..\n// Animation\n// ..\nlet animator = new TOOLKIT.AnimationState(transform, scene);\nanimator.playAnimation(state);\nanimator.stopAnimation();\nanimator.setFloat(name, value);\nanimator.setBool(name, value);\nanimator.setTrigger(name);\n// ..\n// Navigation Agent\n// ..\nlet agent = new TOOLKIT.NavigationAgent(transform, scene);\nagent.setDestination(destination);\nagent.teleport(destination);\n// ..\n// Character Controller\n// ..\nlet character = new TOOLKIT.CharacterController(transform, scene);\ncharacter.move(velocity);\ncharacter.jump(speed);\ncharacter.turn(angle);\ncharacter.rotate(x,y,z,w);\ncharacter.set(x,y,z);\nlet grounded = character.isGrounded();\n// ..\n// Static Scene Manager\n// ..\nlet script = TOOLKIT.SceneManager.FindScriptComponent(transform, classname);\nlet prefab = TOOLKIT.SceneManager.InstantiatePrefabFromContainer(container, prefabname, newprefabname);\n\n\n```\n\n\n\n"
	}
],
"codewrx-babylon-agent.promptVersionStamp": "1.0.0",
"codewrx-workspace.instructionsCleared": false,
"codewrx-workspace.setupCompleted": true
}